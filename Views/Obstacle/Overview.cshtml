@model FirstWebApplication.Models.ObstacleData
@{
    ViewData["Title"] = "Overview";
}
<main class="min-h-screen bg-gray-50">
  <div class="mx-auto max-w-xl px-4 py-10 sm:py-16">
    <h1 class="text-2xl sm:text-3xl font-semibold text-gray-900 mb-6">Obstacle Overview</h1>

    <div class="grid gap-4 bg-white p-6 rounded-xl shadow">
      <p><span class="font-semibold">Name:</span> @Model.ObstacleName</p>
      <p><span class="font-semibold">Height:</span> @Model.ObstacleHeight</p>
      <p><span class="font-semibold">Description:</span> @Model.ObstacleDescription</p>

      <p><span class="font-semibold">Primary coordinates:</span>
        @(Model.Latitude.HasValue && Model.Longitude.HasValue
            ? $"{Model.Latitude.Value:F6}, {Model.Longitude.Value:F6}"
            : "—")
      </p>

      <div>
        <span class="font-semibold">All marker coordinates:</span>
        @{
          var listText = "—";
          if (!string.IsNullOrWhiteSpace(Model.MarkerCoordinatesJson))
          {
              try
              {
                  var coords = System.Text.Json.JsonSerializer.Deserialize<double[][]>(Model.MarkerCoordinatesJson!);
                  if (coords != null && coords.Length > 0)
                  {
                      <ul class="list-disc list-inside text-sm mt-1">
                      @for (int i = 0; i < coords.Length; i++)
                      {
                          var lat = coords[i][0];
                          var lng = coords[i][1];
                          <li>Marker @(i+1): @lat.ToString("F6", System.Globalization.CultureInfo.InvariantCulture), @lng.ToString("F6", System.Globalization.CultureInfo.InvariantCulture)</li>
                      }
                      </ul>
                      listText = "";
                  }
              }
              catch { }
          }
        }
        @if (!string.IsNullOrEmpty(listText)) { @listText }
      </div>
    </div>

    <div class="mt-6">
      <label class="block text-sm font-medium text-gray-700 mb-2">Obstacle location</label>
      <div id="map-overview" class="rounded-xl border border-gray-200" style="height:420px;"></div>
    </div>

    <div class="mt-6 flex gap-3">
      <a asp-controller="Obstacle" asp-action="DataForm" class="inline-flex items-center justify-center rounded-lg border px-4 py-2 text-gray-700 hover:bg-gray-50">Register another</a>

      <form asp-controller="Obstacle" asp-action="Edit" method="post" class="contents">
        <input type="hidden" name="ObstacleName" value="@Model.ObstacleName" />
        <input type="hidden" name="ObstacleHeight" value="@Model.ObstacleHeight" />
        <input type="hidden" name="ObstacleDescription" value="@Model.ObstacleDescription" />
        <input type="hidden" name="GeometryGeoJson" value="@Model.GeometryGeoJson" />
        <input type="hidden" name="Latitude" value="@Model.Latitude" />
        <input type="hidden" name="Longitude" value="@Model.Longitude" />
        <input type="hidden" name="MarkerCoordinatesJson" value="@Model.MarkerCoordinatesJson" />
        <button type="submit" class="inline-flex items-center justify-center rounded-lg bg-blue-600 px-4 py-2 text-white hover:bg-blue-700">
          Edit
        </button>
      </form>
    </div>
  </div>
</main>

@section Scripts {
  <!-- Leaflet assets -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

  <script>
    const map = L.map('map-overview').setView([58.1467, 7.9956], 12);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 20,
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    const geoJsonStr = '@(Model.GeometryGeoJson ?? "")'.replace(/&quot;/g, '"');
    if (geoJsonStr) {
      try {
        const gj = JSON.parse(geoJsonStr);
        const layer = L.geoJSON(gj).addTo(map);
        if (layer.getLayers().length > 0) map.fitBounds(layer.getBounds(), { padding: [20,20] });
      } catch (err) {
        console.warn("Kunne ikke lese GeoJSON:", err);
      }
    } else if (@(Model.Latitude.HasValue.ToString().ToLower()) && @(Model.Longitude.HasValue.ToString().ToLower())) {
      const lat = @Model.Latitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture);
      const lng = @Model.Longitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture);
      L.marker([lat, lng]).addTo(map);
      map.setView([lat, lng], 14);
    }
  </script>
}
