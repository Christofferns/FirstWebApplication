@model FirstWebApplication.Models.ObstacleData
@{
    ViewData["Title"] = "Register Obstacle";
}

<main class="min-h-screen bg-gray-50">
  <div class="mx-auto max-w-xl px-4 py-10 sm:py-16">
    <h1 class="text-2xl sm:text-3xl font-semibold text-gray-900 mb-6">Register Obstacle</h1>

    <div asp-validation-summary="ModelOnly" class="mb-4 text-sm text-red-700"></div>

    <form asp-action="DataForm" method="post" class="space-y-5 bg-white p-6 rounded-xl shadow">
      @Html.AntiForgeryToken()

      <div>
        <label asp-for="ObstacleName" class="block text-sm font-medium text-gray-700"></label>
        <input asp-for="ObstacleName" class="mt-1 block w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500" />
        <span asp-validation-for="ObstacleName" class="text-sm text-red-600"></span>
      </div>

      <div>
        <label asp-for="ObstacleHeight" class="block text-sm font-medium text-gray-700"></label>
        <input asp-for="ObstacleHeight" class="mt-1 block w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500" type="number" step="0.01" />
        <span asp-validation-for="ObstacleHeight" class="text-sm text-red-600"></span>
      </div>

      <div>
        <label asp-for="ObstacleDescription" class="block text-sm font-medium text-gray-700"></label>
        <input asp-for="ObstacleDescription" class="mt-1 block w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500" />
        <span asp-validation-for="ObstacleDescription" class="text-sm text-red-600"></span>
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700">Kart – tegn hvor hindringen er</label>
        <div id="map" class="mt-2 rounded-xl border border-gray-200" style="height:420px;"></div>
      </div>

      <input type="hidden" asp-for="GeometryGeoJson" id="GeometryGeoJson" />
      <input type="hidden" asp-for="Latitude" id="Latitude" />
      <input type="hidden" asp-for="Longitude" id="Longitude" />
      <input type="hidden" asp-for="MarkerCoordinatesJson" id="MarkerCoordinatesJson" />

      <button type="submit" class="w-full rounded-lg bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
        Submit Data
      </button>
    </form>

    @section Scripts {
      <partial name="_ValidationScriptsPartial" />

      <!-- Leaflet + Draw assets -->
      <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
      <link rel="stylesheet" href="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.css" />
      <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
      <script src="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.js"></script>

      <script>
        // 1) Init kart
        const map = L.map('map').setView([58.1467, 7.9956], 12);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 20, attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        // 2) Koordinat-readout
        const readout = document.createElement('div');
        readout.className = 'text-xs text-gray-600 mt-2';
        readout.id = 'coordReadout';
        document.getElementById('map').after(readout);

        // 3) FeatureGroup + draw
        const drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);
        const drawControl = new L.Control.Draw({
          edit: { featureGroup: drawnItems, remove: true },
          draw: { marker:true, polygon:true, polyline:true, rectangle:true, circle:false, circlemarker:false }
        });
        map.addControl(drawControl);

        const geoField = document.getElementById('GeometryGeoJson');
        const latField = document.getElementById('Latitude');
        const lngField = document.getElementById('Longitude');
        const markerArrayField = document.getElementById('MarkerCoordinatesJson');

        function syncGeoJsonField() {
          const fc = drawnItems.toGeoJSON();
          geoField.value = JSON.stringify(fc);

          const markerCoords = [];
          let firstMarkerLatLng = null;

          drawnItems.eachLayer(l => {
            if (l instanceof L.Marker) {
              const p = l.getLatLng();
              markerCoords.push([p.lat, p.lng]);
              if (!firstMarkerLatLng) firstMarkerLatLng = p;
            }
          });

          let lat = null, lng = null;
          if (firstMarkerLatLng) {
            lat = firstMarkerLatLng.lat; lng = firstMarkerLatLng.lng;
          } else if (drawnItems.getLayers().length > 0) {
            const b = drawnItems.getBounds().getCenter();
            lat = b.lat; lng = b.lng;
          }

          latField.value = lat ?? '';
          lngField.value = lng ?? '';
          markerArrayField.value = JSON.stringify(markerCoords);

          if (lat != null && lng != null) {
            readout.textContent = `Primært punkt: ${lat.toFixed(6)}, ${lng.toFixed(6)}  •  Antall markører: ${markerCoords.length}`;
          } else {
            readout.textContent = `Ingen geometri enda. Tegn i kartet eller sett en markør.`;
          }
        }

        map.on(L.Draw.Event.CREATED, e => { drawnItems.addLayer(e.layer); syncGeoJsonField(); });
        map.on(L.Draw.Event.EDITED,  syncGeoJsonField);
        map.on(L.Draw.Event.DELETED, syncGeoJsonField);

        map.on('mousemove', e => {
          if (!geoField.value) {
            readout.textContent = `Peker: ${e.latlng.lat.toFixed(6)}, ${e.latlng.lng.toFixed(6)}`;
          }
        });

        if (geoField.value) {
          try {
            const gj = JSON.parse(geoField.value);
            const layer = L.geoJSON(gj);
            layer.eachLayer(l => drawnItems.addLayer(l));
            if (layer.getLayers().length > 0) map.fitBounds(layer.getBounds(), { padding:[20,20] });
          } catch {}
        }

        syncGeoJsonField();
      </script>
    }
  </div>
</main>
